# 리스트를 만들어 보자
# 파이썬의 리스트는 길이가 동적이며 내부의 값을 변화시킬 수 있고 여러 타입을 사용할 수 있는 아주 자유로운 array 자료형이다
_list = [1, 2, 3.5, 'hello']
# 당연히 리스트의 한 요소가 리스트일 수도 있다
_list = [1, 2, ['hello', 'hi'], 3]

# 인덱싱 가능
print(_list[2])
print(_list[-1])
# 리스트 안의 리스트는 타 언어의 2차원 배열이라 생각하고 인덱싱
print(_list[2][1])

# 슬라이싱도 가능
print(_list[:3])

# 리스트나 문자열이나 문법적인 부분은 많이 닮아 있다
list_a = [1, 2, 3]
list_b = [4, 5, 6]
print(list_a + list_b)
print(list_a * 2)

# 리스트는 요소를 추가하고 수정하고 삭제할 수 있어야 할 것이다
# 1. 리스트에 오버로딩된 연산자를 이용하여 반복 가능한 객체(리스트, 튜플 등)를 리터럴로 붙이기
list_a += [4]
list_a += 5, 6
# 2. append 메소드를 이용해 붙이기
list_a.append(7)
print(list_a)

# 특정 인덱스의 값 수정은 인덱싱으로 접근해서 값을 바꾸면 된다
list_a[3] = 'yes'
# 슬라이싱 방식으로도 할 수 있으며 이 경우는 요소 치환이다
list_a[:3] = 3, 4, 1, 4, 5, 6
# 치환이기 때문에 굳이 슬라이싱 범위와 길이를 맞추지 않아도 되며, 반복 가능한 객체라면 어떤 타입을 assign해줘도 상관없다(연산자 오버로딩으로 구현된 리스트 내부의 메소드가 객체를 순회하므로)
# - 위의 경우 tuple 타입으로 자동 packing돼서 넘어갈 것이다(감싸는 괄호 없이 값을 나열하는 경우 파이썬은 자동으로 tuple로 처리)
print(list_a)

# 삭제는 del 함수를 사용한다
del list_a[-3:-1]
print(list_a)
# 정확히는 객체의 소멸자(__del__())를 부르는 구문인데, 클래스 부분에서 다시 알아보도록 하자

# 리스트와 뒤에서 배울 dictionary, tuple 등은 iterable 객체이다
# 파이썬에서 iterable(반복 가능한) 객체는 굉장히 특별한데, unpack이라는 개념을 알고 있으면 좋다
a, b, c, d = [1, 2, 3, 4]
print(a, b, c, d)
