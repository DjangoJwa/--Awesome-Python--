# List와 Tuple은 Python의 대표적인 Iterable(반복 가능한) 객체이며 유한 개의 객체 집합의 '순서 있는 열거'를 표현한다
# Iterable은 한 번에 하나의 요소를 반환할 수 있는 객체를 의미하며, Python에서는 해당 객체의 iterator를 반환하는 __iter__() 메소드 또는
# 요소의 접근을 위한 __getitem__() 메소드가 정의된 객체를 iterable이라고 정의하고 있다
# https://docs.python.org/3/glossary.html#term-iterable

# -- List
l = [1, 2, 3, 4, 5, -6.8]
# 대괄호로 감싸고, 각 요소들은 쉼표로 구분
# 가장 일반적인 iterable 자료형이며, 값을 다루는 부분에 있어 매우 자유로움

# 1. 요소 추가
l.append(6)
# 리스트의 맨 끝에 요소 추가

l.insert(2, 10)
# 리스트의 2번 인덱스에 요소 삽입

# 2. 요소 접근(인덱싱) & 요소 수정
l[1] = 9
# 타 언어의 배열 접근 방식과 비슷한 인덱싱이라는 개념을 지원

l[-1] = 9
# 음수 인덱싱도 가능하며, -1은 맨 마지막 요소, -2는 마지막에서 두 번째 요소, ... 를 뜻함

# 3. 슬라이싱
print(l[0:3])
# [1, 9, 10]
# 특정 집합을 잘라내기 위해 사용
# [start:end] 형태의 슬라이싱은 start번째 요소부터 end-1번째 요소까지를 리스트로 반환

print(l[:3])
# [1, 9, 10]
print(l[-4:])
# [3, 4, 5, -6.8, 9]
# 슬라이싱에서 start의 0, end의 끝 인덱스는 생략 가능

print(l[:])
# [1, 9, 10, 3, 4, 5, -6.8, 9]
# start와 end를 모두 생략하면, 원본 리스트의 복사본을 만들어 반환

print(l[::2])
# [1, 10, 4, -6.8]
# 슬라이싱의 원래 문법은 [start:end:stride]
# stride는 슬라이싱할 간격을 나타내며, 기본값은 1이다
# 위의 경우 0번째부터 끝까지(start와 end가 모두 생략되었으므로) stride인 2씩 인덱스를 증가시키며 리스트를 슬라이싱
# 홀수/짝수 인덱스의 요소들만 가져오는 등의 상황에서 유용하다

l[0:3] = [1, 2]
# 슬라이싱을 할당에 사용
# 슬라이싱으로 지정한 범위를 대체하므로, 슬라이싱의 범위와 할당할 list의 길이는 달라도 상관 없음(새로 들어온 값에 맞춰 늘어나거나 줄어듬)

# 4. 요소 제거
del l[0]
del l[0:2]
# del이라는 statement를 사용하며, list의 요소를 제거하거나 객체 자체를 제거하는 용도로도 사용

# 5. 기타 메소드
l.sort()
# 정렬

l.reverse()
# 뒤집기

print(l.count(3))
# list.count(n) -> 리스트 내에서 n이 등장하는 횟수 반환

print(l.index(3))
# list.index(n) -> 리스트 내에서 n이 최초 등장하는 위치 반환

l.remove(3)
# list.remove(n) -> 리스트 내에서 최초 등장하는 n을 제거

print(l.pop())
# list.pop() -> list[-1]을 제거하며 반환

l.clear()
# list.clear() -> 리스트의 요소를 모두 제거

# -- Tuple
t = (1, 2, 3, 4, 5)
# 소괄호로 감싸고, 각 요소들은 쉼표로 구분

t = 1, 2, 3, 4, 5
# 별도로 감싸는 괄호를 명시하지 않으면 알아서 tuple 타입으로 처리
# Tuple은 List처럼 순서가 보장된 값의 나열을 다루지만 한 번 선언되고 나면 수정(추가, 변경, 삭제)이 불가능
# Read-only list라고 생각할 수 있음

t = (1,)
# 값이 하나 뿐인 튜플은 콤마(,)를 요소 뒤에 명시해야 함(콤마가 없는 경우 int로 추론되므로)

# 1. 인덱싱 & 슬라이싱
print(t[2], t[:3])
# 3 (1, 2, 3)
# List와 동일하게 인덱싱과 슬라이싱 가능

# 2. 기타 메소드
print(t.count(3))
# tuple.count(n) -> 튜플 내에서 n이 등장하는 횟수 반환

print(t.index(3))
# tuple.index(n) -> 튜플 내에서 n이 최초 등장하는 위치 반환