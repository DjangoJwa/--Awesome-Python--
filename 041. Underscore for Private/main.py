# Python에서 언더스코어(_)는 굉장히 중요한 역할을 한다
# 첫번째는 요소들을 private 처리하기 위함이다
_n = 3
# 대표적인 방어적 프로그래밍 언어인 Java의 경우 키워드로서 private와 같은 접근 제한자를 제공하나,
# Python은 문법적으로 캡슐화를 지원하지 않으며, 암시적으로 private을 표현하기 위해 언더스코어로 시작되는 네이밍을 사용한다
# 이는 진정한 의미의 private은 아니며 단순히 '접근하지 말라'라는 권고사항일 뿐이므로 실제로 접근하면 warning 정도만 발생하고,
# 해당 접근에 대한 책임은 접근자 자신에게 있다
# Java의 private도 직접 수정하거나 리플렉션으로 접근하면 결국은 접근 가능하므로, Python은 아예 개발자를 믿는 문화를 형성하고 있다

# 간혹 아래와 같은 네이밍을 사용하는 경우도 있다
__n = 3
# 겉으로 보기에는 해당 변수가 보이지 않아 진정한 의미의 private처럼 보이지만,
# 네임 맹글링(요소의 이름을 그대로 사용하지 않고 변형시켜 충돌을 방지하는 것)에 의한 것이므로 private을 구현하기 위해 사용하는 것은 이상적이지 않다